---
name: ansible-test
description: >-
  GitHub Action for checking Ansible Collections
  with ansible-test
branding:
  icon: check-circle
  color: gray-dark
inputs:
  ansible-core-version:
    description: >-
      `ansible-core` Git revision. See https://github.com/ansible/ansible/tags
      and https://github.com/ansible/ansible/branches/all?query=stable- for
      ideas. The repository this refers to can be changed with the
      `ansible-core-github-repository-slug` option.
    default: stable-2.14
    required: true
  ansible-core-github-repository-slug:
    description: The GitHub repository slug from which to check out ansible-core
    default: ansible/ansible
  controller-python-version:
    description: >-
      Controller Python version. Only used for integration tests and
      ansible-core 2.12 or later when `target-python-version` is also
      specified.
    default: auto
  collection-root:
    description: Collection root relative to repository root
    default: .
  collection-src-directory:
    description: >-
      A pre-checked out collection directory that's already on disk,
      substitutes getting the source from the remote Git repository if
      set. This action will not attempt to mutate its contents
  docker-image:
    description: Docker image used by ansible-test
  git-checkout-ref:
    description: >-
      Committish to check out, unused
      if `collection-src-directory` is set
  origin-python-version:
    description: >-
      Environment Python version. The value `auto` uses the maximum Python
      version supported by the given `ansible-core-version`.
    default: auto
  pre-test-cmd:
    description: Extra command to invoke before ansible-test
  python-version:
    description: >-
      **(DEPRECATED)** Use `origin-python-version` instead. This is only kept
      for backwards compatibility.
    deprecationMessage: >-
      Replace `python-version` with `origin-python-version`.
      It is scheduled to be removed in version 3 of this action.
  target:
    description: ansible-test TARGET
  target-python-version:
    description: Target Python version
  testing-type:
    description: One of 'sanity', 'units' or 'integration'
    required: true
  test-deps:
    description: Test dependencies to install along with this collection
outputs:
  ansible-playbook-executable:
    description: Path to the auto-installed `ansible-playbook` executable
    value: ~/.local/bin/ansible-playbook
  ansible-test-executable:
    description: Path to the auto-installed `ansible-test` executable
    value: ~/.local/bin/ansible-test
  checkout-directory:
    description: >-
      Path to the auto-downloaded
      collection src directory
    value: ${{ steps.collection-metadata.outputs.checkout-path }}
  collection-fqcn:
    description: Detected collection FQCN
    value: ${{ steps.collection-metadata.outputs.fqcn }}
  collection-name:
    description: Detected collection name
    value: ${{ steps.collection-metadata.outputs.name }}
  collection-namespace:
    description: Detected collection namespace
    value: ${{ steps.collection-metadata.outputs.namespace }}
  origin-python-path:
    description: >-
      The [`python-path` output
      value](https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#python-path)
      of the [setup-python](https://github.com/actions/setup-python/#readme)
      action.
    value: ${{ steps.setup-python.outputs.python-path }}
  origin-python-version:
    description: >-
      The actual value of `origin-python-version` passed to the
      [setup-python](https://github.com/actions/setup-python/#readme) action.
    value: >-
      ${{ steps.compute-origin-python-version.outputs.origin-python-version }}
runs:
  using: composite
  steps:
  - name: Log the next step action
    run: echo ▷ Figuring out the environment Python version...
    shell: bash
  - name: Compute job Python version
    id: compute-origin-python-version
    run: |
      # Compute job Python version
      import os
      import sys

      def set_output(name, value):
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as out:
              print(f'{name}={value}', file=out)

      # Input from GHA
      origin_python_version = '${{ inputs.origin-python-version }}'
      old_python_version = '${{ inputs.python-version }}'
      ansible_core_version = '${{ inputs.ansible-core-version }}'

      # Handle case that deprecated Python version parameter is provided
      if old_python_version:
          # Check whether the default of origin-python-version was changed
          if origin_python_version != 'auto':
              print(
                  '::error ::`python-version` and `origin-python-version` '
                  'cannot both be supplied. Use only `origin-python-version` '
                  'and not its deprecated alias `python-version`.'
              )
              sys.exit(1)

          origin_python_version = old_python_version

      if origin_python_version == 'auto':
          # Determine the maximum Python version supported by the
          # given ansible-core version.
          python_version_fallback_for_devel = '3.10'
          python_version_map = {
              'stable-2.9': '3.8',
              'stable-2.10': '3.9',
              'stable-2.11': '3.9',
              'stable-2.12': '3.10',
              'stable-2.13': '3.10',
              'stable-2.14': '3.10',
          }
          origin_python_version = python_version_map.get(
              ansible_core_version,
              # For any non-stable branch, we assume
              # the latest version supported by 'devel':
              python_version_fallback_for_devel,
          )

      # Set computed origin-python-version
      set_output('origin-python-version', origin_python_version)
    shell: python
  - name: Log the next step action
    run: >-
      echo ▷ Setting job Python to
      ${{
        steps.compute-origin-python-version.outputs.origin-python-version
      }}...
    shell: bash
  - name: >-
      Set controller Python to
      ${{ steps.compute-origin-python-version.outputs.origin-python-version }}
    id: setup-python
    uses: actions/setup-python@v4
    with:
      python-version: >-
        ${{
          steps.compute-origin-python-version.outputs.origin-python-version
        }}

  - name: Log the next step action
    run: >-
      echo ▷ Install Python YAML library
    shell: bash
  - name: Install PyYAML
    run: >-
      set -x
      ;
      python -m
      pip install
      'PyYAML>5,<6'
      --disable-pip-version-check
      --user
      ;
      set +x
    shell: bash

  - name: Log the next step action
    if: >-
      !inputs.collection-src-directory
    run: >-
      echo ▷ Checking out the repository into a temporary location...
    shell: bash
  - name: Check out the collection
    if: >-
      !inputs.collection-src-directory
    uses: actions/checkout@v3
    with:
      path: .tmp-ansible-collection-checkout
      persist-credentials: false
      ref: ${{ inputs.git-checkout-ref }}

  - name: Log the next step action
    run: >-
      echo ▷ Extracting the collection metadata from "'galaxy.yml'"...
    shell: bash
  - name: Extract the collection metadata
    id: collection-metadata
    run: |
      import os
      import yaml

      def set_output(name, value):
          with open(os.getenv('GITHUB_OUTPUT'), 'a') as out:
              print(f'{name}={value}', file=out)

      COLLECTION_META_FILE = 'galaxy.yml'
      with open(COLLECTION_META_FILE) as galaxy_yml:
          collection_meta = yaml.load(galaxy_yml)

      coll_name = collection_meta['name']
      coll_ns = collection_meta['namespace']

      set_output('name', coll_name)
      set_output('namespace', coll_ns)

      set_output('fqcn', f'{coll_ns}.{coll_name}')
      set_output('collection-namespace-path', f'ansible_collections/{coll_ns}')
      set_output('checkout-path', f'ansible_collections/{coll_ns}/{coll_name}')
    shell: python
    working-directory: >-
      ${{
        format(
          '{0}/{1}',
          (
            inputs.collection-src-directory
            && inputs.collection-src-directory
            || '.tmp-ansible-collection-checkout'
          ),
          inputs.collection-root
        )
      }}

  - name: Log the next step action
    run: >-
      echo ▷ ${{ inputs.collection-src-directory && 'Copy' || 'Move' }}
      "'${{ steps.collection-metadata.outputs.fqcn }}'"
      collection to ${{ steps.collection-metadata.outputs.checkout-path }}...
    shell: bash
  - name: Move the collection to the proper path
    run: >-
      set -x
      ;
      mkdir -pv
      "${{ steps.collection-metadata.outputs.collection-namespace-path }}"
      ;
      ${{ inputs.collection-src-directory && 'cp -a' || 'mv' }}
      -v
      "${{
        format(
          '{0}/{1}',
          (
            inputs.collection-src-directory
            && inputs.collection-src-directory
            || '.tmp-ansible-collection-checkout'
          ),
          inputs.collection-root != '.' && inputs.collection-root || ''
        )
      }}"
      "${{ steps.collection-metadata.outputs.checkout-path }}"
      ;
      set +x
    shell: bash

  - name: Log the next step action
    run: >-
      echo ▷ Installing ansible-core
      version ${{ inputs.ansible-core-version }}...
    shell: bash
  - name: Install ansible-core (${{ inputs.ansible-core-version }})
    run: >-
      set -x
      ;
      python -m pip install
      https://github.com/${{
        inputs.ansible-core-github-repository-slug
      }}/archive/${{
        inputs.ansible-core-version
      }}.tar.gz
      --disable-pip-version-check
      --user
      ;
      set +x
    shell: bash

  - name: Log the next step action
    run: >-
      echo ▷ Installing collection
      dependencies: ${{ inputs.test-deps }}
    shell: bash
  - name: Install collection dependencies
    # if: inputs.test-deps
    # yamllint disable rule:line-length
    run: >-
      ${{
          inputs.test-deps
          && format(
              'set -x; ~/.local/bin/ansible-galaxy collection install {0} -p .; set +x',
              inputs.test-deps
          )
          || '>&2 echo Skipping installing the dependencies...'
      }}
    # yamllint enable rule:line-length
    shell: bash

  - name: Log the next step action
    run: >-
      echo ▷ Running a pre-test
      command: "'${{ inputs.pre-test-cmd }}'"
    shell: bash
  - name: Run a pre-test command
    # if: inputs.pre-test-cmd
    # run: ${{ inputs.pre-test-cmd }}
    run: >-
      ${{
          inputs.pre-test-cmd
          && format('set -x; {0}; set +x', inputs.pre-test-cmd)
          || '>&2 echo Skipping running the pre test command...'
      }}
    shell: bash
    working-directory: ${{ steps.collection-metadata.outputs.checkout-path }}

  - name: Log the next step action
    run: >-
      echo ▷ Running ${{ inputs.testing-type }} tests...
    shell: bash
  - name: Run ${{ inputs.testing-type }} tests
    # yamllint disable rule:line-length
    # NOTE: Theoretically, it's best to have a `--` separator before the
    # NOTE: targets list but unfortunately, it causes problem with the
    # NOTE: arguments bypass when run with `--docker` so for now, it's
    # NOTE: not included in the command.
    # Refs:
    # * https://github.com/ansible-community/ansible-test-gh-action/pull/9#discussion_r748488366
    # * https://github.com/ansible-community/ansible-test-gh-action/issues/8#issuecomment-968505014
    run: >-
      set -x
      ;
      ~/.local/bin/ansible-test ${{ inputs.testing-type }}
      -v --color
      --coverage
      ${{
          inputs.testing-type == 'sanity'
          && '--junit'
          || ''
      }}
      ${{
          inputs.testing-type == 'integration'
          && '--retry-on-error --continue-on-error --diff'
          || ''
      }}
      ${{
          inputs.testing-type == 'integration'
          && inputs.ansible-core-version != 'stable-2.9'
          && inputs.ansible-core-version != 'stable-2.10'
          && inputs.ansible-core-version != 'stable-2.11'
          && inputs.target-python-version
          && inputs.controller-python-version != 'auto'
          && inputs.controller-python-version != inputs.target-python-version
          && format(
              '--controller docker:default,python={0} --target docker:{1},python={2}',
              inputs.controller-python-version,
              inputs.docker-image || 'default',
              inputs.target-python-version
          )
          || inputs.target-python-version
          && format(
              '--docker {0} --python {1}',
              inputs.docker-image,
              inputs.target-python-version
          )
          || format(
              '--docker {0}',
              inputs.docker-image
          )
      }}
      ${{
          inputs.testing-type == 'integration'
          && job.container.network != ''
          && format('--docker-network={0}', job.container.network)
          || ''
      }}
      ${{ inputs.target }}
      ;
      set +x
    # yamllint enable rule:line-length
    shell: bash
    working-directory: ${{ steps.collection-metadata.outputs.checkout-path }}

  - name: Log the next step action
    run: >-
      echo ▷ Generating a coverage report...
    shell: bash
  - name: Generate coverage report
    run: >-
      set -x
      ;
      ~/.local/bin/ansible-test coverage xml
      -v --requirements
      --group-by command
      --group-by version
      ;
      set +x
    shell: bash
    working-directory: ${{ steps.collection-metadata.outputs.checkout-path }}

  - name: Log the next step action
    run: >-
      echo ▷ Sending the coverage data over to
      https://codecov.io/gh/${{ github.repository }}...
    shell: bash
  - name: >-
      Send the coverage data over to
      https://codecov.io/gh/${{ github.repository }}
    uses: codecov/codecov-action@v3
    with:
      files: >-
        ${{
          steps.collection-metadata.outputs.checkout-path
        }}/tests/output/reports/coverage=${{
          inputs.testing-type
        }}=*.xml
      flags: ${{ inputs.testing-type }}

  - name: Produce markdown test summary from JUnit
    if: always()
    uses: test-summary/action@v2
    with:
      # NOTE: The path is borrowed from
      # https://github.com/ansible/ansible/blob/71adb02/.azure-pipelines/scripts/process-results.sh#L6-L10
      # which suggests that ansible-core's location is different from
      # the collection ones.
      # Since we are targeting collections, it's fine for us not to
      # have a similar conditional.
      paths: >-
        ${{
          steps.collection-metadata.outputs.checkout-path
        }}/tests/output/junit/*.xml

  - name: Check if Cobertura XML coverage files exist
    if: always()
    id: coverage-files
    run: >-
      set +x
      ;
      compgen -G "${{
        steps.collection-metadata.outputs.checkout-path
      }}/tests/output/reports/coverage=${{
        inputs.testing-type
      }}=*.xml"
      && ( echo "present=true" >> ${GITHUB_OUTPUT} )
      ;
      exit 0
    shell: bash
  - name: Produce markdown test summary from Cobertura XML
    if: steps.coverage-files.outputs.present == 'true'
    uses: irongut/CodeCoverageSummary@v1.3.0
    with:
      badge: true
      filename: >-
        ${{
          steps.collection-metadata.outputs.checkout-path
        }}/tests/output/reports/coverage=${{
          inputs.testing-type
        }}=python-*.xml
      format: markdown
      output: both
  # Ref: https://github.com/irongut/CodeCoverageSummary/issues/66
  - name: Append coverage results to Job Summary
    if: steps.coverage-files.outputs.present == 'true'
    run: >-
      cat code-coverage-results.md >> "${GITHUB_STEP_SUMMARY}"
    shell: bash

...

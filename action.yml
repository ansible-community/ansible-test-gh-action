---
name: ansible-test
description: >-
  GitHub Action for checking Ansible Collections
  with ansible-test
branding:
  icon: check-circle
  color: gray-dark
inputs:
  ansible-core-version:
    description: >-
      `ansible-core` Git revision. See https://github.com/ansible/ansible/tags
      and https://github.com/ansible/ansible/branches/all?query=stable- for
      ideas. The repository this refers to can be changed with the
      `ansible-core-github-repository-slug` option.
    default: stable-2.13
    required: true
  ansible-core-github-repository-slug:
    description: The GitHub repository slug from which to check out ansible-core
    default: ansible/ansible
  collection-root:
    description: Collection root relative to repository root
    default: .
  docker-image:
    description: Docker image used by ansible-test
    default:
  git-checkout-ref:
    description: Committish to check out
    default:
  git-checkout-repository:
    description: A Git repository to check out
    default:
  pre-test-cmd:
    description: Extra command to invoke before ansible-test
    default:
  python-version:
    description: Controller Python version
    default: 3.9
  target:
    description: ansible-test TARGET
    default:
  target-python-version:
    description: Target Python version
    default:
  testing-type:
    description: One of 'sanity', 'units' or 'integration'
    required: true
  test-deps:
    description: Test dependencies to install along with this collection
    default:
outputs:
  ansible-playbook-executable:
    description: Path to the auto-installed `ansible-playbook` executable
    value: ~/.local/bin/ansible-playbook
  ansible-test-executable:
    description: Path to the auto-installed `ansible-test` executable
    value: ~/.local/bin/ansible-test
  checkout-directory:
    description: >-
      Path to the auto-downloaded
      collection src directory
    value: ${{ steps.collection-metadata.outputs.checkout-path }}
  collection-fqcn:
    description: Detected collection FQCN
    value: ${{ steps.collection-metadata.outputs.fqcn }}
  collection-name:
    description: Detected collection FQCN
    value: ${{ steps.collection-metadata.outputs.name }}
  collection-namespace:
    description: Detected collection FQCN
    value: ${{ steps.collection-metadata.outputs.namespace }}
runs:
  using: composite
  steps:
  - name: Open an expandable block of code
    run: >-
      echo ::group::Setting controller Python
      to ${{ inputs.python-version }}...
    shell: bash
  - name: Set controller Python to ${{ inputs.python-version }}
    uses: actions/setup-python@v4
    with:
      python-version: ${{ inputs.python-version }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Install Python YAML library
    shell: bash
  - name: Install PyYAML
    run: >-
      set -x
      ;
      python -m
      pip install
      'PyYAML>5,<6'
      --disable-pip-version-check
      --user
      ;
      set +x
    shell: bash
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Checking out the repository into a temporary location...
    shell: bash
  - name: Check out the collection
    uses: actions/checkout@v3
    with:
      path: .tmp-ansible-collection-checkout
      persist-credentials: false
      ref: ${{ inputs.git-checkout-ref }}
      repository: ${{ inputs.git-checkout-repository }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Extracting the collection metadata from "'galaxy.yml'"...
    shell: bash
  - name: Extract the collection metadata
    id: collection-metadata
    run: |
      import yaml

      COLLECTION_META_FILE = 'galaxy.yml'
      with open(COLLECTION_META_FILE) as galaxy_yml:
          collection_meta = yaml.load(galaxy_yml)

      coll_name = collection_meta['name']
      coll_ns = collection_meta['namespace']

      print('::set-output name=name::{name}'.format(name=coll_name))
      print('::set-output name=namespace::{ns}'.format(ns=coll_ns))

      print(
          '::set-output name=fqcn::{ns}.{name}'.
          format(name=coll_name, ns=coll_ns)
      )
      print(
          '::set-output '
          'name=collection-namespace-path::ansible_collections/{ns}'.
          format(ns=coll_ns)
      )
      print(
          '::set-output name=checkout-path::ansible_collections/{ns}/{name}'.
          format(name=coll_name, ns=coll_ns)
      )
    shell: python
    working-directory: .tmp-ansible-collection-checkout/${{ inputs.collection-root }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Move "'${{ steps.collection-metadata.outputs.fqcn }}'"
      collection to ${{ steps.collection-metadata.outputs.checkout-path }}...
    shell: bash
  - name: Install ansible-core (${{ inputs.ansible-core-version }})
    run: >-
      set -x
      ;
      mkdir -pv
      "${{ steps.collection-metadata.outputs.collection-namespace-path }}"
      ;
      ln -s
      ".tmp-ansible-collection-checkout/${{ inputs.collection-root }}"
      "${{ steps.collection-metadata.outputs.checkout-path }}"
      ;
      set +x
    shell: bash
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Installing ansible-core
      version ${{ inputs.ansible-core-version }}...
    shell: bash
  - name: Install ansible-core (${{ inputs.ansible-core-version }})
    run: >-
      set -x
      ;
      python -m pip install
      https://github.com/${{
        inputs.ansible-core-github-repository-slug
      }}/archive/${{
        inputs.ansible-core-version
      }}.tar.gz
      --disable-pip-version-check
      --user
      ;
      set +x
    shell: bash
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Installing collection
      dependencies: ${{ inputs.test-deps }}
    shell: bash
  - name: Install collection dependencies
    # if: inputs.test-deps
    run: >-
      ${{
          inputs.test-deps
          && format('set -x; ~/.local/bin/ansible-galaxy collection install {0} -p .; set +x', inputs.test-deps)
          || '>&2 echo Skipping installing the dependencies...'
      }}
    shell: bash
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Running a pre-test
      command: "'${{ inputs.pre-test-cmd }}'"
    shell: bash
  - name: Run a pre-test command
    # if: inputs.pre-test-cmd
    # run: ${{ inputs.pre-test-cmd }}
    run: >-
      ${{
          inputs.pre-test-cmd
          && format('set -x; {0}; set +x', inputs.pre-test-cmd)
          || '>&2 echo Skipping running the pre test command...'
      }}
    shell: bash
    working-directory: ${{ steps.collection-metadata.outputs.checkout-path }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Running ${{ inputs.testing-type }} tests...
    shell: bash
  - name: Run ${{ inputs.testing-type }} tests
    # NOTE: Theoretically, it's best to have a `--` separator before the
    # NOTE: targets list but unfortunately, it causes problem with the
    # NOTE: arguments bypass when run with `--docker` so for now, it's
    # NOTE: not included in the command.
    # Refs:
    # * https://github.com/ansible-community/ansible-test-gh-action/pull/9#discussion_r748488366
    # * https://github.com/ansible-community/ansible-test-gh-action/issues/8#issuecomment-968505014
    run: >-
      set -x
      ;
      ~/.local/bin/ansible-test ${{ inputs.testing-type }}
      -v --color
      --docker ${{ inputs.docker-image }}
      --coverage
      ${{
          inputs.testing-type == 'integration'
          && '--retry-on-error --continue-on-error --diff'
          || ''
      }}
      ${{
          inputs.target-python-version
          && format('--python {0}', inputs.target-python-version)
          || ''
      }}
      ${{ inputs.target }}
      ;
      set +x
    shell: bash
    working-directory: ${{ steps.collection-metadata.outputs.checkout-path }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Generating a coverage report...
    shell: bash
  - name: Generate coverage report
    run: >-
      set -x
      ;
      ~/.local/bin/ansible-test coverage xml
      -v --requirements
      --group-by command
      --group-by version
      ;
      set +x
    shell: bash
    working-directory: ${{ steps.collection-metadata.outputs.checkout-path }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash

  - name: Open an expandable block of code
    run: >-
      echo ::group::Sending the coverage data over to
      https://codecov.io/gh/${{ github.repository }}...
    shell: bash
  - name: >-
      Send the coverage data over to
      https://codecov.io/gh/${{ github.repository }}
    uses: codecov/codecov-action@v3
    with:
      flags: ${{ inputs.testing-type }}
  - name: Close an expandable block of code
    run: >-
      echo ::endgroup::
    shell: bash
...
